@use "sass:math";

// the width also needs to be changed in alg-node.component.ts
$node-base-width: 350px;
$node-metadata-width: 250px;
$collapse-width: 16px;
$socket-margin: 6px;
$socket-size: 16px;

:host {
  display: block;
  background: white;
  border: 4px solid var(--cui-dark);
  border-radius: 4px;
  cursor: pointer;
  //box-sizing: border-box;
  width: auto !important;
  height: auto !important;
  position: relative;
  user-select: none;

  .socket-label {
    position: absolute;
    top: -40px;
    left: 50%;
    transform: translateX(-50%);
  }

  .node-body {
    display: flex;
  }

  .controls {
    width: $node-base-width;
  }

  .metadata {
    width: $node-metadata-width;
  }

  .collapse-button {
    width: $collapse-width;
    padding: 2px;
  }

  .collapse-button:hover {
    color: var(--cui-primary);
    background: linear-gradient(to left, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0) 100%);
  }

  .title-wrapper {
    margin: -4px -4px 0px;
    border-radius: 4px 4px 0 0;
  }

  .title-wrapper.auxiliary {
    background-color: var(--cui-secondary);
  }

  .simple-badge:hover {
    background-color: var(--cui-danger) !important;
  }

  &:hover {
    border-color: var(--cui-primary) !important;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);

    .title-wrapper {
      background-color: var(--cui-primary) !important;
    }
  }

  &.selected {
    border-color: var(--cui-primary) !important;

    .title-wrapper {
      background-color: var(--cui-primary) !important;
    }
  }

  .outputs {
    display: flex;
    justify-content: space-around;
    margin-top: -22px;
    height: 24px;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
  }

  .inputs {
    display: flex;
    justify-content: space-around;
    margin-bottom: -8px;
    height: 24px;
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
  }

  .output, .input {
    text-align: left;
    display: block;
  }

  .output-socket {
    text-align: right;
    display: inline-block;
  }

  .input-socket {
    text-align: left;
    display: inline-block;
  }

  .input-control {
    z-index: 1;
    width: calc(100% - #{$socket-size + 2*$socket-margin});
    vertical-align: middle;
    display: inline-block;
  }

  .control {
    padding: $socket-margin math.div($socket-size, 2) + $socket-margin;
  }
}

:host:has(.auxiliary) {
  border: 4px solid var(--cui-secondary);
}
